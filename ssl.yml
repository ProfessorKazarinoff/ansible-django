# ssl.yml
#
# An Ansible playbook to create an SSL cirt using certbot
# uses instructions from https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
  # Check if the SSL key files already exhist on the server
    - name: Check if fullchain.pem file exhists
      stat: path=/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
      register: fullchain_path
    - name: Check if privkey.pem files exhists
      stat: path=/etc/letsencrypt/live/{{ domain_name }}/privkey.pem
      register: privkey_path
 
  # Run apt update && apt upgrade
    - name: sudo apt update && sudo apt upgrade
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #one day
  
  # Install certbot and the certbot nginx extension with apt
    - name: Install certbot and the certbot nginx extension with apt
      apt:
        name:
        - certbot
        - python3-certbot-nginx
        state: present

  # Copy nginx config file will ssl included
    - name: copy nginx config file to /etc/nginx/sites-available/mydomain.org
      template:
        src: templates/nginx_ssl.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
      when: not privkey_path.stat.exists and not fullchain_path.stat.exists
  # Simlink sites-available to sites-enabled
    - name: create symlink from site-available to sites-enabled
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}"
        dest: /etc/nginx/sites-enabled/default
        state: link
      when: not privkey_path.stat.exists and not fullchain_path.stat.exists

  # Allow Nginx Full progile through the ufw firewall
    - name: Let the ufw firewall allow the Nginx Full profile through
      community.general.ufw:
        rule: allow
        name: Nginx Full

  # Block Nginx http with the ufw firewall
    - name: ufw firewall prevents Nginx HPPT profile through
      community.general.ufw:
        rule: deny
        name: Nginx HTTP

  # Run Certbot
    - name: Run certbot on the domain name using provided email address
      shell: certbot -d {{ domain_name }} -d www.{{ domain_name }} --nginx -n --agree-tos -m {{ email }}
      args:
        executable: /bin/bash
      become: true
      register: certbot_stdout
      when: not privkey_path.stat.exists and not fullchain_path.stat.exists
    - name: print out the certbot output
      debug:
        var: certbot_stdout.stdout_lines
      when: certbot_stdout

  # Might have to change the permissions on the key files so nginx can read them
  # Consider templating in a file for sites-enabled that includes the post certbot stuff, but also includes
  # http --> https redirect.

  # Restart nginx
    - name: Restart the nginx systemd service
      systemd:
        state: restarted
        name: nginx
